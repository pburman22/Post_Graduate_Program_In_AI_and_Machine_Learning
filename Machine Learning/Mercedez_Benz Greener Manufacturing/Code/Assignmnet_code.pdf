{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ffd5dfa1",
   "metadata": {},
   "source": [
    "# Import"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6b5fb19",
   "metadata": {},
   "source": [
    "**Import Libraries**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "65b59011",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from sklearn.feature_selection import VarianceThreshold\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.decomposition import PCA\n",
    "import matplotlib.pyplot as plt\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46b4604e",
   "metadata": {},
   "source": [
    "**Import Dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5160e011",
   "metadata": {},
   "outputs": [],
   "source": [
    "# training data\n",
    "train_raw = pd.read_csv('Dataset/Raw Data/train_data_raw.csv')\n",
    "\n",
    "# testing data\n",
    "test_raw = pd.read_csv('Dataset/Raw Data/test_data_raw.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "516bc284",
   "metadata": {},
   "source": [
    "# QC"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a3bcd74",
   "metadata": {},
   "source": [
    "**Drop columns not required**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9c1f4a57",
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop the column 'ID'\n",
    "train_raw = train_raw.drop(['ID'], axis = 1)\n",
    "test_raw = test_raw.drop(['ID'], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ca5f6d3",
   "metadata": {},
   "source": [
    "**Separate Independent and Dependent Variables**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "30f4cda1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# rearrange columns to make column 'y' as the last column\n",
    "train_raw = train_raw.reindex(columns = [col for col in train_raw.columns if col != 'y'] + ['y'])\n",
    "\n",
    "# select independent variables\n",
    "train_raw_x = train_raw.iloc[:, :-1]\n",
    "\n",
    "# select dependent variable\n",
    "train_raw_y = train_raw.iloc[:, -1:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "282745f8",
   "metadata": {},
   "source": [
    "**Check to see if the minimum and the maximum values are same or different for the independent variables**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f298e8b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# select non-object dtypes\n",
    "train_raw_x_select_dtype = train_raw_x.select_dtypes(include=['int', 'float'])\n",
    "\n",
    "# check the minimum values of the columns of the dataset\n",
    "train_raw_x_min = [train_raw_x_select_dtype.min(axis = 0)]\n",
    "\n",
    "# check to see if all values in the list are same\n",
    "train_raw_x_min.count(train_raw_x_min[0]) == len(train_raw_x_min)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "72066ba3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# select non-object dtypes\n",
    "train_raw_x_select_dtype = train_raw_x.select_dtypes(include=['int', 'float'])\n",
    "\n",
    "# check the minimum values of the columns of the dataset\n",
    "train_raw_x_max = [train_raw_x_select_dtype.max(axis = 0)]\n",
    "\n",
    "# check to see if all values in the list are same\n",
    "train_raw_x_max.count(train_raw_x_max[0]) == len(train_raw_x_max)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d847f2c5",
   "metadata": {},
   "source": [
    "**Next let us check if NA vlues or zeros are present in the dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0803a94f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_raw_x.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6e4ed894",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_raw.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43d5af71",
   "metadata": {},
   "source": [
    "**Check for outliers**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a62b773e",
   "metadata": {},
   "source": [
    "since all the columns have values between 0 and 1 and the categorical values have been converted into one hot encoders, there does not seem to be any outliers."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0ee1d94",
   "metadata": {},
   "source": [
    "**Check for number of unique vales in each column**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "79357195",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "X0      47\n",
       "X1      27\n",
       "X2      44\n",
       "X3       7\n",
       "X4       4\n",
       "        ..\n",
       "X380     2\n",
       "X382     2\n",
       "X383     2\n",
       "X384     2\n",
       "X385     2\n",
       "Length: 376, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_raw_x.nunique(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "61bcd725",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "X0      49\n",
       "X1      27\n",
       "X2      45\n",
       "X3       7\n",
       "X4       4\n",
       "        ..\n",
       "X380     2\n",
       "X382     2\n",
       "X383     2\n",
       "X384     2\n",
       "X385     2\n",
       "Length: 376, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_raw.nunique(axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc905f28",
   "metadata": {},
   "source": [
    "**Let's convert the categorical values into one hot encoders**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7b5b2f40",
   "metadata": {},
   "outputs": [],
   "source": [
    "# categorical columns\n",
    "train_raw_x_object_dtype_cols = [column for column, is_type in (train_raw_x.dtypes==\"object\").items() if is_type]\n",
    "test_raw_object_dtype_cols = [column for column, is_type in (test_raw.dtypes==\"object\").items() if is_type]\n",
    "\n",
    "# get one hot encoding of 'object_dtype_cols'\n",
    "one_hot = pd.get_dummies(test_raw[['X0', 'X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X8']])\n",
    "\n",
    "# Drop columns 'X0', 'X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X8' as it is now encoded\n",
    "train_raw_dummies = train_raw.drop(['X0', 'X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X8'],axis = 1)\n",
    "test_raw_dummies = test_raw.drop(['X0', 'X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X8'],axis = 1)\n",
    "\n",
    "# Join the encoded data\n",
    "train_raw_pre = train_raw_dummies.join(one_hot)\n",
    "test_raw_pre = test_raw_dummies.join(one_hot)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9590a0a9",
   "metadata": {},
   "source": [
    "# PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f99ac2f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading the PCA object for training set\n",
    "pca = PCA(n_components = 2) # Here we choose the number of components that we will keep.\n",
    "pca_train = pca.fit_transform(train_raw_pre)\n",
    "pca_train_df = pd.DataFrame(pca_train, columns = ['principal_component_1','principal_component_2'])\n",
    "\n",
    "# Loading the PCA object for test set\n",
    "pca = PCA(n_components = 2) # Here we choose the number of components that we will keep.\n",
    "pca_test = pca.fit_transform(test_raw_pre)\n",
    "pca_test_df = pd.DataFrame(pca_test, columns = ['principal_component_1','principal_component_2'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e5d488b",
   "metadata": {},
   "source": [
    "# XGB Regressor Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6e710a0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             n_estimators=100, n_jobs=None, num_parallel_tree=None,\n",
       "             predictor=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             n_estimators=100, n_jobs=None, num_parallel_tree=None,\n",
       "             predictor=None, random_state=None, ...)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None,\n",
       "             colsample_bytree=None, early_stopping_rounds=None,\n",
       "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "             gamma=None, gpu_id=None, grow_policy=None, importance_type=None,\n",
       "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "             n_estimators=100, n_jobs=None, num_parallel_tree=None,\n",
       "             predictor=None, random_state=None, ...)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# instantiate the model\n",
    "xg_reg = XGBRegressor()\n",
    "\n",
    "# fit the model\n",
    "xg_reg.fit(pca_train, train_raw_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6d8c9185",
   "metadata": {},
   "outputs": [],
   "source": [
    "# make the prediction\n",
    "y_pred = xg_reg.predict(pca_test)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
